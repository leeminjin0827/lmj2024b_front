[ GIThub ]
    1. https://github.com
    2. 버전관리 서비스 ( VCS )
    3. 소스코드를 GITHUB 서버에 저장하고 다른 사람과 동시에 병렬 관리가 가능하다.
    4. 특징
        1. 소프트웨어 개발에서 소스코드를 효과적으로 관리 , 무료
        2. 개발 프로젝트내 폴더 작업을 기록하고 버전(과거) 관리 , 추적 
        3. 여러 사람들과 동일한 프로젝트(저장소-리포지토리)를 병렬 작업
    5. 대표 용어 
        1. Repository : 저장소 / 프로젝트의 파일이나 폴더를 저장하는 저장소 
        2. Commit : 파일을 추가/변경 된 내용을 저장소(현재pc로컬) 에 저장하는 작업 
        3. push : 추가/변견 된 내용을 원격(github서버) 저장소에 업로드 작업 

    6. 저장소 만드는 사람/계정 , 파일 commit/push 이름/이메일 (서명) 별로 존재한다. 

[ vscode 와 github 연동 ]
    1. github 로 부터 회원가입 진행 
    2. git 설치 : https://git-scm.com/downloads/win
    3. [64-bit Git for Windows Setup.] Git-2.47.0.2-64-bit
    4. [vscode 재설치] 후 왼쪽 메뉴에 [소스 제어]탭 클릭 
    5. [GitHub 게시] -> [로그인] -> 웹페이지[git]로그인 진행 -> [continue]
    6. Publish to GitHub public repository [본인아이디]/프로젝트명(최상위폴더명) --> 선택 클릭 --> [확인]
    
    ---> * 최초/pc변경시 git 사용시 : git 에서 'user.name' 및 'user.email'를 구성해야 합니다. 창이 나옵니다.

    7. [vscode 상단메뉴] -> [터미널] -> [새 터미널] -> [+]옆에 [V] 클릭 -> [git bash]
    8. 
        [ git user.name 확인 ] git config --global user.name
        [ git user.name 설정 ] git config --global user.name git아이디
        [ git user.email 확인 ] git config --global user.email 
        [ git user.email 설정] git config --global user.email git아이디@이메일포함

    9. [vscode 왼쪽 메뉴] 에 [소스 제어]탭 클릭 -> [메시지 입력칸 = 기록 메시지 ]

    10. [ 커밋 및 푸시  ] 
        * 만일 최초/pc변경시 git 사용이면 [ git 로그인 ]창 나오면 브라우저 로그인 처리 

[ GIT PAGE ] 간단한 페이지(HTML/CSS/JS) 배포 , 포트폴리오(프론트엔드 개발자)
    - git 에서 코드 저장소(리포지토리)의 코드를 호스팅 할수 있는 기능 
    1. 호스팅할 저장소의  메인페이지 파일명을 'index.html' 
    2. 본인 github 홈페이지 접속 
    3. [ new ] 또는 [ new repository ]
    4. Create a new repository
        - Repository name : (임의로 아무거나) tolist
        - Public
            [ create repository ]
    5. 빈 리포지토리에 화면 가운데 'uploading an existing file' 클릭 
    6. 'index.html' 파일을 드래그 해서 업로드 , css/js 와 또 다른 html 포함 가능
        -> index.html 파일은 리포지토리에 최상위 경로에 있어여한다.
        [ commit change ]
    6. 리포지토리 상단 메뉴에 [ settings ] 클릭 
    7. 왼쪽 사이드 메뉴에 [Pages] 클릭 
    8. [Branch] 항목에서 
        [None] ---> [main]으로 변경후 [/root] [save]클릭 
    9. 1~2분 기다리기 : 새로고침F5 -> Your site is live at https://xxxxx.github.io/xxxx

[ 로컬저장소(내PC) , 원격저장소(gitHub server) ]
- https://github.com/itdanjalog/tj2024b_front ( 원격 저장소 ) : 깃허브 회사의 서버실에 코드 저장
- clone(복제) : 원격 저장소로 부터 로컬 저장소로 가져오는 행위 
- commit(완료) : 로컬 저장소로 부터 코드를 저장 행위 
- push : 로컬 저장소로 부터 완료(commit)된 코드들을 원격으로 올리기/업로드 행위
    - commit and push
- PULL : 원격 저장소로 부터 상태를 다운로드 행위 

--- 현재 강의에서의 gitHub 구조 
    1. git회사PC 
        원격저장소 : https://github.com/itdanjalog/tj2024b_front
    2. 학원의 내PC
        로컬저장소 : tj2024b_front
    3. 집/노트북 내PC
        로컬저장소 : kim/tj2024b_front

[ 버전 관리 ] VCS 
    12/12 13:02
        [원격] https://github.com/itdanjalog/tj2024b_front  1.0
        [학원로컬] tj2024b_front 1.0
    12/12 20:02
        저장소 복제 
        [집로컬] kim/tj2024b_front 1.0
    12/12 22:00
        [집로컬] kim/tj2024b_front ---> 1.1 PUSH [원격]1.1
    12/13 9:30
        학원도착 , 만일 집에서 PUSH한적 있거나 저장소의 상태(버전) 변화가 있으면 
        [학원로컬] pull --> 1.1
    12/13 18:20
        [학원로컬] tj2024b_front ----> 1.2 PUSH [원격]1.2
    12/13 20:00
        [집도착] pull --> 1.2
    12/13 22:00
        [집로컬] kim/tj2024b_front ---> 1.3 push [원격]1.3
    12/14 9:30
        학원도착 , pull


[ 브랜치 / 분기 ]
    1. 정의 : 프로젝트를 하나의 저장소에서 각 브랜치마다 서로 다른 저장 상태/버전 관리 할 수 있도록 지원하는 기능 
    2. 목적 : 1. 프로젝트 버전관리( 배포용, 테스트용 등등) 2.협업간의 각 사람들마다 코드 구분/분류
        - 기본값 브랜치 는 master/main
        - master/main 브랜치를 한사람이 사용하면 문제 없지만. 여러사람이 동일한 브랜치로 동일한 저장소 사용하면 관리 힘들다.

[ 브랜치 생성 / 운영 ] - vscode 
    [ 1. 브랜치 생성 ] 
        방법1. 소스제어 ---> ··· ---> 분기 ---> 새분기 만들기 
        방법2. 오른쪽 하단에 main(브랜치명) 클릭
        2. 브랜치명 아무거나(영문 권장) 입력후 엔터 
        * 브랜치생성은 로컬에 생성되었기 때문에 원격저장소에 적용하기위해 push
        3. 브랜치생성후 최초1번은 push( 또는 브랜치 게시 ) 해야한다.
    
    [ 2. 로컬에서 브랜치 변경 ] * 체크아웃 
        방법1 : 소스제어 ---> ··· ---> 다음으로 체크아웃 
        방법2 : 오른쪽 하단에 main(현재브랜치) 클릭
        * 주의할점 브랜치 변경시 현재 상태를 commit/push 완료후 에 하는걸 권장 

    [ 3. 다른 브랜치의 상태 가져오기 ] * pull 
        -> 방법1. 소스제어 ---> ··· ---> 분기 ---> 병합
        * 같은 파일내 코드이면 병합(충돌)메시지 , 병합 에디터 실행 
        - 두 브랜치간의 코드들을 확인하면서 결과 코드로 병합하기 

[ 브랜치 실습 ]
    [초대하는사람입장]
    1. 프로젝트 생성
    2. 원격저장소에 프로젝트를 게시
    3. 웹 저장소 상단메뉴 [settings ] 클릭
    4. 정 왼쪽메뉴 -> [Collaborators] 클릭 -> [ add people ] 클릭
    5. 팀원 git 이름 또는 이메일로 검색해서 초대장 , 강사 : kgs2072@naver.com

    [초대받은사람입장]
    1.초대를 보내왔는지 확인 [ 1.git과 연동된 이메일 홈페지에서 메일로 확인 2.git홈페이지에서 로고 왼쪽 아이콘 클릭 ]
    2.각 초대를 확인 [ ACCEPT ]
    3. vscode 에서 새창 열기 ---> [git 리포지토리 복제] --> 복제할 저장소 선택 

[ 과제1 ]
    1. 한사람이 프로젝트 생성하여 index.html 만들고 원격저장소를 게시한다. 
    2. 원격저장소를 다른 사람들을 초대한다. 
    3. 모든 조원들은 각 브랜치를 생성한다. 
    4. index.html 조원1(1절), 조원2(2절), 조원3(3절), 조원4(4절) --> 각 코드 작성후 각 push 한다.
    5. 원격저장소 만든 사람이 main 브랜치로 이동하여 본인포함 조원들의 모든 브랜치 상태를 병합한다.
    6. main브랜치가 최신화 했으면 ( 브랜치 병합 1개당 push 1번 권장 ) 본인 브랜치로 돌아간다.
    7. 각 조원들은 main브랜치를 병합한다.

- 희만 , 상범 , 도하        
- 은서 , 예나 , 웅재
- 정우 , 민진 , 홍빈 , 리원

[ 과제2 ]
    1. day14 중간과제8.html / js  - 3파일로 분리하기 
        1. 글쓰기페이지 write.html , write.js 
        2. 글출력페이지 board.html , board.js 
        3. 글상세페이지 view.html , view.js

    2. 샘플 배열(게시물목록) 대신에 --> localStorage 객체를 이용한 3개 페이지의 게시물 메모리/배열 공유. day20 실습 참고



    

- 학원 자리 변경 전 
1. 개인 카카오톡 로그아웃
2. 인터넷/크롬/엣지 : ( 네이버/github/페이스북 등등 ) 로그아웃
3. vscode , 이클립스 코드 최종 push 하기 
4. vscode github 회원정보 해제
	1.  제어판 , ( 윈도우 버튼 --> 자격증명관리자 검색 )
	2. '자격증명관리자'
	3. [ window 자격 증명 ] 클릭 
	4. 하단에 일반 자격증명 목록 에서 github.com 클릭 
	5. [제거]
4. vscode 오른쪽 하단에 유저아이콘 클릭 --> git계정명 --> 로그아웃
-----------------------------------------------------------------
-----------------------------------------------------------------
- 학원 자리 변경 후 
	[ 프로젝트 가져오기 ]
	    1. vscode 실행
	    2. 새창 ---> git 리포지토리 복제 
	    3. 깃허브 웹로그인창 --> 로그인 
	[ commit/push git 계정 정보 변경  ]
	- vscode 터미널 ---> git bash --> commit/push git 계정 정보 변경 
		git config --global user.name 깃아이디 
		git config --global user.email 깃이메일